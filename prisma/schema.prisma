// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  // Add "debian-openssl-3.0.x" to ensure compatibility with the runtime environment
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // e.g., postgresql://user:pass@host:port/db
}

model Tool {
  id             String           @id @default(cuid())
  name           String           @unique
  slug           String           @unique
  description    String?
  iconClass      String?          // e.g., "fas fa-home"
  displayOrder   Int              @default(0)
  isActive       Boolean          @default(true)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  tags           ToolTag[]
  toolUsageStats ToolUsageStats[]
}

model Tag {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  color       String?  @default("#000000") // Default color
  createdAt   DateTime @default(now())
  tools       ToolTag[]
}

model ToolTag {
  tool       Tool     @relation(fields: [toolId], references: [id])
  toolId     String
  tag        Tag      @relation(fields: [tagId], references: [id])
  tagId      String
  assignedAt DateTime @default(now())

  @@id([toolId, tagId])
}

model ToolUsageStats {
  id         String   @id @default(cuid())
  tool       Tool     @relation(fields: [toolId], references: [id])
  toolId     String   @unique // Each tool has one stats entry
  usageCount Int      @default(0)
  lastUsed   DateTime @default(now())
}

model AdminUser {
  id           String           @id @default(cuid())
  username     String           @unique
  email        String           @unique
  passwordHash String
  role         AdminRole        @default(ADMIN)
  isActive     Boolean          @default(true)
  lastLoginAt  DateTime?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  auditLogs    AdminAuditLog[]
}

model AdminAuditLog {
  id          String    @id @default(cuid())
  adminUser   AdminUser @relation(fields: [adminUserId], references: [id])
  adminUserId String
  action      String
  tableName   String
  recordId    String
  oldValues   Json?
  newValues   Json?
  ipAddress   String
  userAgent   String
  createdAt   DateTime  @default(now())
}

enum AdminRole {
  SUPER_ADMIN
  ADMIN
  READ_ONLY
}
